==============================
COMMAND HISTORY ENTRY - ADD GENERAL FLOW WIZARD
==============================
Date: Sun Aug 31 2025 15:50:00 GMT-0400
Command: "Add similar plus icon button on the GENERAL flow treeview item and have it open a similar 'Add General Flow Wizard' view"
Status: ✅ COMPLETED SUCCESSFULLY

Implementation Summary:
- Created addGeneralFlowWizardView.js: 5-step wizard for creating general flows
- Created generalFlowCommands.ts: Command handlers for general flow operations
- Updated package.json: Added command, menu item, and keyboard shortcut (alt+a g)
- Updated registerCommands.ts: Registered general flow commands
- Enhanced ModelService: Added getAllGeneralFlows() method

Architecture Notes:
- Followed existing pattern from form wizard implementation
- Used consistent webview message passing architecture
- Maintained schema-driven UI generation approach
- Added proper tree view menu integration
- Implemented keyboard shortcut for accessibility

Build Status: ✅ Successful compilation
Files Modified: 5 files created/updated
No errors detected in webpack build

Next Steps:
- Test the plus icon appears on GENERAL tree items
- Verify wizard opens and functions correctly
- Confirm general flows are created successfully
==============================

PREVIOUS ENTRIES:
USER REQUEST: "all cells in the export need to be wrapped in double quotes"
**Status**: ✅ COMPLETED

**Changes Made**:
1. Modified `saveRequirementsFulfillmentToCSV()` function in `requirementsFulfillmentCommands.ts`
   - Updated header row generation to wrap all headers in double quotes: `headers.map(header => "\"${header}\"")`
   - Changed cell processing logic to wrap ALL values in double quotes instead of only when needed
   - Replaced conditional quoting with universal quoting: `"${escapedValue}"`
   - Maintains proper quote escaping by doubling internal quotes: `replace(/"/g, '""')`

**Technical Details**:
- Previously: Only wrapped cells containing commas, quotes, or newlines
- Now: ALL cells are wrapped in double quotes for consistent CSV formatting
- Headers: "Role","Data Object","Action","Access","User Story Status","Mapping Status","User Journey Status","Fulfillment Status"
- Data cells: All values properly escaped and quoted regardless of content

**Architecture Notes**:
- Follows standard CSV RFC 4180 formatting for quoted fields
- Ensures consistent parsing across different CSV readers/applications
- Maintains backward compatibility while improving data integrity

2024-12-31 XX:XX:XX - USER STORY REQUIREMENT FULFILLMENTS VIEW - AUTO-OPEN CSV ON DOWNLOAD
USER REQUEST: "user story requirement fulfillments view downlaod to csv button shoudl open the csv immediately"
**Status**: ✅ COMPLETED

**Changes Made**:
1. Modified `requirementsFulfillmentCommands.ts` in 'saveCsvToWorkspace' case
   - Added automatic file opening after CSV save operation
   - Added `vscode.window.showTextDocument(fileUri)` to open CSV immediately
   - Pattern matches other views like workflowListCommands.ts

**Technical Details**:
- CSV download flow: webview → 'exportToCSV' → extension generates CSV → 'csvExportReady' → webview sends 'saveCsvToWorkspace' → extension saves and now opens file
- Uses same pattern as other list views for consistency
- File opens in VS Code editor immediately after successful save

**Architecture Notes**:
- Maintains consistent UX across all CSV export functionality
- No changes to webview logic required - only extension command handler
- File path constructed using workspace root and filename from message data
