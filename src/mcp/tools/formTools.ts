// formTools.ts
// Tools for managing forms (objectWorkflow) via MCP
// Created on: October 25, 2025
// This file implements form tools for the MCP server

/**
 * Implements form tools for the MCP server
 */
export class FormTools {
    constructor(modelService: any) {
        // ModelService passed but not used - MCP server uses HTTP bridge
    }

    /**
     * Gets the schema definition for forms (objectWorkflow)
     * Tool name: get_form_schema (following MCP snake_case convention)
     * @returns Schema definition with properties, validation rules, and examples for forms
     */
    public async get_form_schema(): Promise<any> {
        return {
            success: true,
            schema: {
                type: 'object',
                description: 'Form (objectWorkflow) structure in AppDNA model - represents user interface forms for data entry, editing, and deletion',
                objectType: 'objectWorkflow',
                properties: {
                    name: {
                        type: 'string',
                        required: true,
                        format: 'PascalCase',
                        pattern: '^[A-Z][A-Za-z0-9]*$',
                        description: 'Workflow ID, unique for each workflow element. Must be in PascalCase format (starts with uppercase letter, no spaces, can contain letters and numbers).',
                        examples: ['AddCustomer', 'UpdateOrder', 'DeleteProduct', 'ViewCustomerDetails', 'CustomerRegistration']
                    },
                    titleText: {
                        type: 'string',
                        required: false,
                        description: 'Title displayed on the form page. Human-readable title for the form UI.',
                        examples: ['Add Customer', 'Update Order', 'Delete Product', 'View Customer Details']
                    },
                    initObjectWorkflowName: {
                        type: 'string',
                        required: false,
                        description: 'Workflow name for initialization flow (e.g., "UpdateFlavorInitObjWF"). Used for page init flows .cs file names.',
                        examples: ['UpdateFlavorInitObjWF', 'AddCustomerInitObjWF', 'CustomerListInitObjWF']
                    },
                    isInitObjWFSubscribedToParams: {
                        type: 'string',
                        required: false,
                        enum: ['true', 'false'],
                        description: 'Are the init obj wf output vars auto generated by the params of this form? String "true" or "false".',
                        examples: ['true', 'false']
                    },
                    isObjectDelete: {
                        type: 'string',
                        required: false,
                        enum: ['true', 'false'],
                        description: 'Is this form deleting the owner object? If true, this is a delete operation form.',
                        examples: ['true', 'false']
                    },
                    layoutName: {
                        type: 'string',
                        required: false,
                        description: 'Name of the layout template to use for this form.',
                        examples: ['DefaultLayout', 'TwoColumnLayout', 'WideLayout']
                    },
                    introText: {
                        type: 'string',
                        required: false,
                        description: 'Introduction text displayed at the top of the form.',
                        examples: ['Please enter customer details below.', 'Update the order information.']
                    },
                    formTitleText: {
                        type: 'string',
                        required: false,
                        description: 'Form-specific title text (alternative to titleText).',
                        examples: ['Customer Registration Form', 'Order Details']
                    },
                    formIntroText: {
                        type: 'string',
                        required: false,
                        description: 'Form-specific introduction text.',
                        examples: ['Fill out the information below to create a new customer account.']
                    },
                    formFooterText: {
                        type: 'string',
                        required: false,
                        description: 'Text displayed in the form footer.',
                        examples: ['Â© 2025 Company Name', 'Contact support at support@company.com']
                    },
                    codeDescription: {
                        type: 'string',
                        required: false,
                        description: 'Code description for documentation and code generation hints.',
                        examples: ['Add customer workflow', 'Update order details', 'Delete product entry']
                    },
                    isAutoSubmit: {
                        type: 'string',
                        required: false,
                        enum: ['true', 'false'],
                        description: 'Should the form auto-submit when conditions are met? String "true" or "false".',
                        examples: ['true', 'false']
                    },
                    isHeaderVisible: {
                        type: 'string',
                        required: false,
                        enum: ['true', 'false'],
                        description: 'Is the form header visible? String "true" or "false".',
                        examples: ['true', 'false']
                    },
                    isPage: {
                        type: 'string',
                        required: false,
                        enum: ['', 'true', 'false'],
                        description: 'Is this a standalone page? Can be empty string, "true", or "false".',
                        examples: ['', 'true', 'false']
                    },
                    isAuthorizationRequired: {
                        type: 'string',
                        required: false,
                        enum: ['true', 'false'],
                        description: 'Does this form require user authorization? String "true" or "false".',
                        examples: ['true', 'false']
                    },
                    isLoginPage: {
                        type: 'string',
                        required: false,
                        enum: ['true', 'false'],
                        description: 'Is this the login page? String "true" or "false".',
                        examples: ['true', 'false']
                    },
                    isLogoutPage: {
                        type: 'string',
                        required: false,
                        enum: ['true', 'false'],
                        description: 'Is this the logout page? String "true" or "false".',
                        examples: ['true', 'false']
                    },
                    roleRequired: {
                        type: 'string',
                        required: false,
                        description: 'Name of the role required to access this form. Should match a role name from the Role lookup object.',
                        examples: ['Administrator', 'Manager', 'User', 'DataEntryClerk']
                    },
                    isCaptchaVisible: {
                        type: 'string',
                        required: false,
                        enum: ['true', 'false'],
                        description: 'Should a CAPTCHA be displayed on this form? String "true" or "false".',
                        examples: ['true', 'false']
                    },
                    targetChildObject: {
                        type: 'string',
                        required: false,
                        description: 'Child object of the owner object that is being added/edited/deleted by this form. Must match an existing data object name (case-sensitive).',
                        examples: ['Order', 'OrderLineItem', 'Customer', 'Product']
                    },
                    isCustomLogicOverwritten: {
                        type: 'string',
                        required: false,
                        enum: ['true', 'false'],
                        description: 'Is custom logic overwritten for this form? String "true" or "false".',
                        examples: ['true', 'false']
                    },
                    objectWorkflowParam: {
                        type: 'array',
                        required: false,
                        description: 'Array of input control parameters (form fields) for this form. Each parameter represents a field/input control on the form.',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    required: true,
                                    format: 'PascalCase',
                                    description: 'Object workflow parameter name in PascalCase format',
                                    examples: ['FirstName', 'LastName', 'EmailAddress', 'CustomerID', 'IsActive']
                                },
                                sqlServerDBDataType: {
                                    type: 'string',
                                    required: false,
                                    enum: ['nvarchar', 'bit', 'datetime', 'int', 'uniqueidentifier', 'money', 'bigint', 'float', 'decimal', 'date', 'varchar', 'text'],
                                    description: 'SQL Server data type for this parameter',
                                    examples: ['nvarchar', 'bit', 'datetime', 'int', 'uniqueidentifier']
                                },
                                sqlServerDBDataTypeSize: {
                                    type: 'string',
                                    required: false,
                                    description: 'Size of data type (for nvarchar, varchar, decimal). Default is 100 for nvarchar.',
                                    examples: ['50', '100', '255', 'MAX', '18,2']
                                },
                                labelText: {
                                    type: 'string',
                                    required: false,
                                    description: 'Human-readable label text displayed for this field',
                                    examples: ['First Name', 'Last Name', 'Email Address', 'Customer ID']
                                },
                                infoToolTipText: {
                                    type: 'string',
                                    required: false,
                                    description: 'Tooltip text displayed when hovering over the info icon next to the parameter label',
                                    examples: ['Enter your first name', 'This field is required']
                                },
                                codeDescription: {
                                    type: 'string',
                                    required: false,
                                    description: 'Code description for documentation',
                                    examples: ['Customer first name field']
                                },
                                defaultValue: {
                                    type: 'string',
                                    required: false,
                                    description: 'Default value for this parameter',
                                    examples: ['0', 'false', '']
                                },
                                isVisible: {
                                    type: 'string',
                                    required: false,
                                    enum: ['true', 'false'],
                                    description: 'Is this parameter visible on the form? String "true" or "false".',
                                    examples: ['true', 'false']
                                },
                                isRequired: {
                                    type: 'string',
                                    required: false,
                                    enum: ['true', 'false'],
                                    description: 'Is this parameter required? String "true" or "false".',
                                    examples: ['true', 'false']
                                },
                                requiredErrorText: {
                                    type: 'string',
                                    required: false,
                                    description: 'Error message displayed when required field is not filled',
                                    examples: ['First name is required', 'Please enter your email address']
                                },
                                isSecured: {
                                    type: 'string',
                                    required: false,
                                    enum: ['true', 'false'],
                                    description: 'Should this parameter be secured (password field)? String "true" or "false".',
                                    examples: ['true', 'false']
                                },
                                isFK: {
                                    type: 'string',
                                    required: false,
                                    enum: ['true', 'false'],
                                    description: 'Is this parameter a foreign key? String "true" or "false". If true, provide fKObjectName.',
                                    examples: ['true', 'false']
                                },
                                fKObjectName: {
                                    type: 'string',
                                    required: false,
                                    description: 'Name of the foreign key object target (data object name). Case-sensitive.',
                                    examples: ['Customer', 'Order', 'Status', 'Role']
                                },
                                fKObjectQueryName: {
                                    type: 'string',
                                    required: false,
                                    description: 'Name of the foreign key object query',
                                    examples: ['GetCustomerList', 'GetOrderList']
                                },
                                isFKLookup: {
                                    type: 'string',
                                    required: false,
                                    enum: ['true', 'false'],
                                    description: 'Is this parameter a foreign key to a lookup object? String "true" or "false".',
                                    examples: ['true', 'false']
                                },
                                isFKList: {
                                    type: 'string',
                                    required: false,
                                    enum: ['true', 'false'],
                                    description: 'Should a dropdown list be shown for this FK? String "true" or "false".',
                                    examples: ['true', 'false']
                                },
                                isFKListInactiveIncluded: {
                                    type: 'string',
                                    required: false,
                                    enum: ['true', 'false'],
                                    description: 'Should inactive items be included in the FK dropdown list? String "true" or "false".',
                                    examples: ['true', 'false']
                                },
                                isFKListUnknownOptionRemoved: {
                                    type: 'string',
                                    required: false,
                                    enum: ['true', 'false'],
                                    description: 'Should the "Unknown" option be removed from FK dropdown? String "true" or "false".',
                                    examples: ['true', 'false']
                                },
                                fKListOrderBy: {
                                    type: 'string',
                                    required: false,
                                    enum: ['NameDesc', 'NameAsc', 'DisplayOrderDesc', 'DisplayOrderAsc'],
                                    description: 'Sort order for FK dropdown list',
                                    examples: ['NameAsc', 'NameDesc', 'DisplayOrderAsc']
                                },
                                isFKListOptionRecommended: {
                                    type: 'string',
                                    required: false,
                                    enum: ['true', 'false'],
                                    description: 'Should a recommended option be highlighted in FK dropdown? String "true" or "false".',
                                    examples: ['true', 'false']
                                },
                                isFKListSearchable: {
                                    type: 'string',
                                    required: false,
                                    enum: ['true', 'false'],
                                    description: 'Should the FK dropdown list be searchable? String "true" or "false".',
                                    examples: ['true', 'false']
                                },
                                FKListRecommendedOption: {
                                    type: 'string',
                                    required: false,
                                    description: 'The recommended option value for FK dropdown',
                                    examples: ['Active', 'Default', 'Recommended']
                                },
                                isRadioButtonList: {
                                    type: 'string',
                                    required: false,
                                    enum: ['true', 'false'],
                                    description: 'Should this parameter be displayed as radio buttons? String "true" or "false".',
                                    examples: ['true', 'false']
                                },
                                isFileUpload: {
                                    type: 'string',
                                    required: false,
                                    enum: ['true', 'false'],
                                    description: 'Is this parameter a file upload field? String "true" or "false".',
                                    examples: ['true', 'false']
                                },
                                isCreditCardEntry: {
                                    type: 'string',
                                    required: false,
                                    enum: ['true', 'false'],
                                    description: 'Is this parameter a credit card entry field? String "true" or "false".',
                                    examples: ['true', 'false']
                                },
                                isTimeZoneDetermined: {
                                    type: 'string',
                                    required: false,
                                    enum: ['true', 'false'],
                                    description: 'Should timezone be determined for this parameter? String "true" or "false".',
                                    examples: ['true', 'false']
                                },
                                isAutoCompleteAddressSource: {
                                    type: 'string',
                                    required: false,
                                    enum: ['true', 'false'],
                                    description: 'Implements typical Google address autocomplete. String "true" or "false".',
                                    examples: ['true', 'false']
                                },
                                autoCompleteAddressSourceName: {
                                    type: 'string',
                                    required: false,
                                    description: 'Name of the source parameter for address autocomplete. Source should have isAutoCompleteAddressSource set to true.',
                                    examples: ['Address', 'AddressLine1']
                                },
                                autoCompleteAddressTargetType: {
                                    type: 'string',
                                    required: false,
                                    enum: ['AddressLine1', 'AddressLine2', 'City', 'StateAbbrev', 'Zip', 'Country', 'Latitude', 'Longitude'],
                                    description: 'Type of address field this parameter represents for autocomplete',
                                    examples: ['AddressLine1', 'City', 'StateAbbrev', 'Zip']
                                },
                                detailsText: {
                                    type: 'string',
                                    required: false,
                                    description: 'Additional details text for this parameter',
                                    examples: ['Additional information about this field']
                                },
                                validationRuleRegExMatchRequired: {
                                    type: 'string',
                                    required: false,
                                    description: 'Regular expression pattern that this parameter must match',
                                    examples: ['^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$', '^\\d{3}-\\d{3}-\\d{4}$']
                                },
                                validationRuleRegExMatchRequiredErrorText: {
                                    type: 'string',
                                    required: false,
                                    description: 'Error message displayed when regex validation fails',
                                    examples: ['Invalid email format', 'Invalid phone number format']
                                },
                                isIgnored: {
                                    type: 'string',
                                    required: false,
                                    enum: ['true', 'false'],
                                    description: 'Should this parameter be ignored by the code generator? String "true" or "false".',
                                    examples: ['true', 'false']
                                },
                                sourceObjectName: {
                                    type: 'string',
                                    required: false,
                                    description: 'Name of the source data object for this parameter',
                                    examples: ['Customer', 'Order', 'Product']
                                },
                                sourcePropertyName: {
                                    type: 'string',
                                    required: false,
                                    description: 'Name of the source property from the source object',
                                    examples: ['FirstName', 'LastName', 'EmailAddress']
                                }
                            }
                        },
                        examples: [
                            [
                                {
                                    name: 'FirstName',
                                    sqlServerDBDataType: 'nvarchar',
                                    sqlServerDBDataTypeSize: '100',
                                    labelText: 'First Name',
                                    isVisible: 'true',
                                    isRequired: 'true',
                                    requiredErrorText: 'First name is required'
                                },
                                {
                                    name: 'CustomerID',
                                    sqlServerDBDataType: 'int',
                                    labelText: 'Customer',
                                    isVisible: 'true',
                                    isFK: 'true',
                                    fKObjectName: 'Customer',
                                    isFKList: 'true',
                                    isFKListSearchable: 'true'
                                },
                                {
                                    name: 'StatusID',
                                    sqlServerDBDataType: 'int',
                                    labelText: 'Status',
                                    isVisible: 'true',
                                    isFK: 'true',
                                    isFKLookup: 'true',
                                    fKObjectName: 'Status',
                                    isFKList: 'true'
                                }
                            ]
                        ]
                    },
                    objectWorkflowButton: {
                        type: 'array',
                        required: false,
                        description: 'Array of buttons displayed on the form. Each button represents an action the user can take.',
                        items: {
                            type: 'object',
                            properties: {
                                buttonType: {
                                    type: 'string',
                                    required: false,
                                    description: 'Type of button (submit, cancel, back, other, etc.)',
                                    examples: ['submit', 'cancel', 'back', 'other']
                                },
                                buttonText: {
                                    type: 'string',
                                    required: false,
                                    description: 'Text displayed on the button',
                                    examples: ['Submit', 'Cancel', 'Save', 'Back', 'Delete']
                                },
                                isVisible: {
                                    type: 'string',
                                    required: false,
                                    enum: ['true', 'false'],
                                    description: 'Is this button visible? String "true" or "false".',
                                    examples: ['true', 'false']
                                },
                                conditionalVisiblePropertyName: {
                                    type: 'string',
                                    required: false,
                                    description: 'Name of property that controls button visibility conditionally',
                                    examples: ['IsEditMode', 'CanDelete']
                                },
                                destinationContextObjectName: {
                                    type: 'string',
                                    required: false,
                                    description: 'Name of the data object that owns the destination target',
                                    examples: ['Customer', 'Order']
                                },
                                destinationTargetName: {
                                    type: 'string',
                                    required: false,
                                    description: 'Name of the destination form/report/workflow to navigate to when button is clicked',
                                    examples: ['CustomerList', 'UpdateCustomer', 'OrderDetails']
                                },
                                introText: {
                                    type: 'string',
                                    required: false,
                                    description: 'Introduction text for the button',
                                    examples: ['Click to submit the form', 'Click to cancel']
                                },
                                isButtonCallToAction: {
                                    type: 'string',
                                    required: false,
                                    enum: ['true', 'false'],
                                    description: 'Should this button be displayed as a call-to-action (highlighted)? String "true" or "false".',
                                    examples: ['true', 'false']
                                },
                                accessKey: {
                                    type: 'string',
                                    required: false,
                                    description: 'Keyboard access key for the button',
                                    examples: ['s', 'c', 'b']
                                },
                                isAccessKeyAvailable: {
                                    type: 'string',
                                    required: false,
                                    enum: ['true', 'false'],
                                    description: 'Is keyboard access key available for this button? String "true" or "false".',
                                    examples: ['true', 'false']
                                }
                            }
                        },
                        examples: [
                            [
                                {
                                    buttonType: 'submit',
                                    buttonText: 'Submit',
                                    isVisible: 'true',
                                    isButtonCallToAction: 'true'
                                },
                                {
                                    buttonType: 'cancel',
                                    buttonText: 'Cancel',
                                    isVisible: 'true',
                                    destinationContextObjectName: 'Customer',
                                    destinationTargetName: 'CustomerList'
                                }
                            ]
                        ]
                    },
                    objectWorkflowOutputVar: {
                        type: 'array',
                        required: false,
                        description: 'Array of output variables displayed after form submission. Each output variable represents a result value shown to the user.',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    required: true,
                                    format: 'PascalCase',
                                    description: 'Output variable name in PascalCase format',
                                    examples: ['SuccessMessage', 'ErrorMessage', 'CustomerID', 'OrderNumber']
                                },
                                sqlServerDBDataType: {
                                    type: 'string',
                                    required: false,
                                    enum: ['nvarchar', 'bit', 'datetime', 'int', 'uniqueidentifier', 'money', 'bigint', 'float', 'decimal', 'date', 'varchar', 'text'],
                                    description: 'SQL Server data type for this output variable',
                                    examples: ['nvarchar', 'int', 'bit']
                                },
                                sqlServerDBDataTypeSize: {
                                    type: 'string',
                                    required: false,
                                    description: 'Size of data type (for nvarchar, varchar, decimal)',
                                    examples: ['100', '255', 'MAX']
                                },
                                labelText: {
                                    type: 'string',
                                    required: false,
                                    description: 'Label text displayed for this output variable',
                                    examples: ['Success Message', 'Customer ID', 'Order Number']
                                },
                                buttonText: {
                                    type: 'string',
                                    required: false,
                                    description: 'Text displayed on button if output variable is a button',
                                    examples: ['View Customer', 'View Order', 'Continue']
                                },
                                buttonNavURL: {
                                    type: 'string',
                                    required: false,
                                    description: 'Navigation URL for button output variable',
                                    examples: ['/customer/details', '/order/list']
                                },
                                isLabelVisible: {
                                    type: 'string',
                                    required: false,
                                    enum: ['true', 'false'],
                                    description: 'Is the label visible for this output variable? String "true" or "false".',
                                    examples: ['true', 'false']
                                },
                                defaultValue: {
                                    type: 'string',
                                    required: false,
                                    enum: ['true', 'false'],
                                    description: 'Default value for this output variable. String "true" or "false".',
                                    examples: ['true', 'false']
                                },
                                isLink: {
                                    type: 'string',
                                    required: false,
                                    enum: ['true', 'false'],
                                    description: 'Is this output variable a link? String "true" or "false".',
                                    examples: ['true', 'false']
                                },
                                isAutoRedirectURL: {
                                    type: 'string',
                                    required: false,
                                    enum: ['true', 'false'],
                                    description: 'Should the form auto-redirect to this URL? String "true" or "false".',
                                    examples: ['true', 'false']
                                },
                                buttonObjectWFName: {
                                    type: 'string',
                                    required: false,
                                    description: 'Name of the workflow to navigate to when button is clicked',
                                    examples: ['ViewCustomer', 'UpdateOrder']
                                },
                                conditionalVisiblePropertyName: {
                                    type: 'string',
                                    required: false,
                                    description: 'Name of property that controls output variable visibility conditionally',
                                    examples: ['IsSuccess', 'HasError']
                                },
                                isVisible: {
                                    type: 'string',
                                    required: false,
                                    enum: ['true', 'false'],
                                    description: 'Is this output variable visible? String "true" or "false".',
                                    examples: ['true', 'false']
                                },
                                isFK: {
                                    type: 'string',
                                    required: false,
                                    enum: ['true', 'false'],
                                    description: 'Is this output variable a foreign key? String "true" or "false".',
                                    examples: ['true', 'false']
                                },
                                fKObjectName: {
                                    type: 'string',
                                    required: false,
                                    description: 'Name of the foreign key object target',
                                    examples: ['Customer', 'Order']
                                },
                                isFKLookup: {
                                    type: 'string',
                                    required: false,
                                    enum: ['true', 'false'],
                                    description: 'Is this output variable a foreign key to a lookup object? String "true" or "false".',
                                    examples: ['true', 'false']
                                },
                                isHeaderText: {
                                    type: 'string',
                                    required: false,
                                    enum: ['true', 'false'],
                                    description: 'Should this output variable be displayed as header text? String "true" or "false".',
                                    examples: ['true', 'false']
                                },
                                isIgnored: {
                                    type: 'string',
                                    required: false,
                                    enum: ['true', 'false'],
                                    description: 'Should this output variable be ignored by the code generator? String "true" or "false".',
                                    examples: ['true', 'false']
                                },
                                sourceObjectName: {
                                    type: 'string',
                                    required: false,
                                    description: 'Name of the source data object for this output variable',
                                    examples: ['Customer', 'Order']
                                },
                                sourcePropertyName: {
                                    type: 'string',
                                    required: false,
                                    description: 'Name of the source property from the source object',
                                    examples: ['CustomerID', 'OrderNumber']
                                }
                            }
                        },
                        examples: [
                            [
                                {
                                    name: 'SuccessMessage',
                                    sqlServerDBDataType: 'nvarchar',
                                    sqlServerDBDataTypeSize: '255',
                                    labelText: 'Success Message',
                                    isVisible: 'true',
                                    isHeaderText: 'true'
                                },
                                {
                                    name: 'CustomerID',
                                    sqlServerDBDataType: 'int',
                                    labelText: 'Customer ID',
                                    isVisible: 'true',
                                    buttonText: 'View Customer',
                                    isLink: 'true'
                                }
                            ]
                        ]
                    }
                },
                validationRules: {
                    name: [
                        'Required field',
                        'Must be unique within the object\'s objectWorkflow array (case-insensitive check)',
                        'Must be in PascalCase format',
                        'Must start with uppercase letter',
                        'Can only contain letters (A-Z, a-z) and numbers (0-9)',
                        'No spaces, hyphens, or special characters allowed',
                        'Common patterns: Action + Entity (AddCustomer, UpdateOrder, DeleteProduct, ViewDetails)'
                    ],
                    titleText: [
                        'Optional field',
                        'Human-readable title for the form',
                        'Displayed at the top of the form page',
                        'Can contain spaces and special characters'
                    ],
                    targetChildObject: [
                        'Optional field',
                        'Must match an existing data object name exactly (case-sensitive)',
                        'Defines which child object this form operates on',
                        'Common for Add/Update/Delete forms'
                    ],
                    roleRequired: [
                        'Optional field',
                        'Must match a role name from the Role lookup object (case-sensitive)',
                        'Controls who can access this form',
                        'Leave empty for public access',
                        'Common values: Administrator, Manager, User, DataEntryClerk'
                    ],
                    objectWorkflowParam: [
                        'Optional array - only included if form has input controls',
                        'Each parameter must have unique name within the form',
                        'Parameter names must be in PascalCase format',
                        'All boolean-like fields use string "true"/"false" not boolean',
                        'sqlServerDBDataType must be one of: nvarchar, bit, datetime, int, uniqueidentifier, money, bigint, float, decimal, date, varchar, text',
                        'sqlServerDBDataTypeSize required for nvarchar, varchar, decimal types',
                        'isFK must be "true" or "false" - if "true" then fKObjectName is required',
                        'isFKLookup must be "true" or "false" - indicates FK to a lookup object',
                        'isFKList must be "true" or "false" - shows dropdown for FK selection',
                        'isVisible must be "true" or "false" - controls field visibility',
                        'isRequired must be "true" or "false" - controls field validation',
                        'fKObjectName must match existing data object name exactly (case-sensitive)',
                        'sourceObjectName and sourcePropertyName link to data object properties'
                    ],
                    objectWorkflowButton: [
                        'Optional array - only included if form has buttons',
                        'Common button types: submit, cancel, back, other',
                        'buttonText provides the displayed text on the button',
                        'destinationContextObjectName and destinationTargetName define navigation',
                        'isButtonCallToAction highlights the button as primary action',
                        'All boolean-like fields use string "true"/"false" not boolean'
                    ],
                    objectWorkflowOutputVar: [
                        'Optional array - only included if form has output variables',
                        'Each output variable must have unique name within the form',
                        'Output variable names must be in PascalCase format',
                        'Can be text displays, links, or buttons',
                        'isLink="true" makes the output variable clickable',
                        'isHeaderText="true" displays as prominent header text',
                        'All boolean-like fields use string "true"/"false" not boolean'
                    ]
                },
                usage: {
                    location: 'Stored in namespace â object â objectWorkflow array in AppDNA model',
                    access: 'Via namespace[0].object[n].objectWorkflow array',
                    modelStructure: 'namespace â object[] â objectWorkflow[]',
                    purpose: 'Define forms for data entry, editing, and deletion operations',
                    relatedTools: [
                        'list_forms - List all forms from the model (if implemented)',
                        'get_form - Get a specific form by name (if implemented)',
                        'create_form - Create new form (if implemented)',
                        'open_form_details_view - Open form details editor in VS Code',
                        'open_add_form_wizard - Open wizard for creating new forms'
                    ]
                },
                commonPatterns: {
                    addForm: {
                        name: 'AddCustomer',
                        titleText: 'Add Customer',
                        targetChildObject: 'Customer',
                        isAuthorizationRequired: 'true',
                        roleRequired: 'DataEntryClerk',
                        objectWorkflowParam: [
                            {
                                name: 'FirstName',
                                sqlServerDBDataType: 'nvarchar',
                                sqlServerDBDataTypeSize: '100',
                                labelText: 'First Name',
                                isVisible: 'true',
                                isRequired: 'true'
                            }
                        ],
                        objectWorkflowButton: [
                            {
                                buttonType: 'submit',
                                buttonText: 'Add Customer',
                                isVisible: 'true',
                                isButtonCallToAction: 'true'
                            }
                        ]
                    },
                    updateForm: {
                        name: 'UpdateCustomer',
                        titleText: 'Update Customer',
                        targetChildObject: 'Customer',
                        isAuthorizationRequired: 'true',
                        objectWorkflowParam: [
                            {
                                name: 'CustomerID',
                                sqlServerDBDataType: 'int',
                                isVisible: 'false',
                                isRequired: 'true'
                            },
                            {
                                name: 'FirstName',
                                sqlServerDBDataType: 'nvarchar',
                                sqlServerDBDataTypeSize: '100',
                                labelText: 'First Name',
                                isVisible: 'true',
                                isRequired: 'true'
                            }
                        ],
                        objectWorkflowButton: [
                            {
                                buttonType: 'submit',
                                buttonText: 'Update',
                                isVisible: 'true',
                                isButtonCallToAction: 'true'
                            },
                            {
                                buttonType: 'cancel',
                                buttonText: 'Cancel',
                                isVisible: 'true'
                            }
                        ]
                    },
                    deleteForm: {
                        name: 'DeleteCustomer',
                        titleText: 'Delete Customer',
                        targetChildObject: 'Customer',
                        isObjectDelete: 'true',
                        isAuthorizationRequired: 'true',
                        roleRequired: 'Manager',
                        objectWorkflowParam: [
                            {
                                name: 'CustomerID',
                                sqlServerDBDataType: 'int',
                                isVisible: 'false',
                                isRequired: 'true'
                            }
                        ],
                        objectWorkflowButton: [
                            {
                                buttonType: 'submit',
                                buttonText: 'Delete',
                                isVisible: 'true',
                                isButtonCallToAction: 'true'
                            }
                        ],
                        objectWorkflowOutputVar: [
                            {
                                name: 'SuccessMessage',
                                sqlServerDBDataType: 'nvarchar',
                                labelText: 'Success Message',
                                isVisible: 'true',
                                isHeaderText: 'true'
                            }
                        ]
                    },
                    loginForm: {
                        name: 'Login',
                        titleText: 'Login',
                        isLoginPage: 'true',
                        isAuthorizationRequired: 'false',
                        objectWorkflowParam: [
                            {
                                name: 'Username',
                                sqlServerDBDataType: 'nvarchar',
                                sqlServerDBDataTypeSize: '100',
                                labelText: 'Username',
                                isVisible: 'true',
                                isRequired: 'true'
                            },
                            {
                                name: 'Password',
                                sqlServerDBDataType: 'nvarchar',
                                sqlServerDBDataTypeSize: '100',
                                labelText: 'Password',
                                isVisible: 'true',
                                isRequired: 'true',
                                isSecured: 'true'
                            }
                        ],
                        objectWorkflowButton: [
                            {
                                buttonType: 'submit',
                                buttonText: 'Login',
                                isVisible: 'true',
                                isButtonCallToAction: 'true'
                            }
                        ]
                    }
                },
                notes: [
                    'Forms (objectWorkflow) represent user interface forms for data operations',
                    'Each form belongs to a data object and operates on that object or its children',
                    'Form names typically follow the pattern: Action + Entity (AddCustomer, UpdateOrder)',
                    'All boolean flags must be string "true" or "false", not boolean values',
                    'objectWorkflowParam array contains input controls (form fields)',
                    'objectWorkflowButton array contains form buttons (submit, cancel, etc.)',
                    'objectWorkflowOutputVar array contains result displays after submission',
                    'targetChildObject specifies which data object is being operated on',
                    'roleRequired controls access based on user roles from the Role lookup object',
                    'isObjectDelete="true" indicates this is a delete operation form',
                    'initObjectWorkflowName links to a page initialization flow',
                    'Foreign key parameters (isFK="true") should specify fKObjectName',
                    'Lookup foreign keys (isFKLookup="true") reference lookup objects (isLookup="true")',
                    'Forms can have special purposes: login (isLoginPage), logout (isLogoutPage)',
                    'DynaFlow forms (isDynaFlow="true") are workflow-based forms',
                    'File upload fields use isFileUpload="true"',
                    'Credit card entry fields use isCreditCardEntry="true"',
                    'Address autocomplete uses isAutoCompleteAddressSource and related properties'
                ]
            },
            note: 'This schema defines the complete structure of forms (objectWorkflow) in the AppDNA model'
        };
    }

    /**
     * Gets a specific form by name from an owner object
     * Tool name: get_form (following MCP snake_case convention)
     * @param parameters Object containing form_name (required) and owner_object_name (optional)
     * @returns Complete form object with all arrays (params, buttons, output vars) and element counts
     */
    public async get_form(parameters?: any): Promise<any> {
        const { owner_object_name, form_name } = parameters || {};

        // Validate required parameters
        const validationErrors: string[] = [];
        
        if (!form_name) {
            validationErrors.push('form_name is required');
        }

        if (validationErrors.length > 0) {
            return {
                success: false,
                error: 'Validation failed',
                validationErrors: validationErrors,
                note: 'form_name is required (case-sensitive). owner_object_name is optional - if not provided, all objects will be searched.'
            };
        }

        try {
            let endpoint: string;
            let forms: any[];
            
            if (owner_object_name) {
                // If owner specified, fetch forms filtered by both owner and form name
                endpoint = `/api/forms?owner_object_name=${encodeURIComponent(owner_object_name)}&form_name=${encodeURIComponent(form_name)}`;
            } else {
                // If owner not specified, fetch forms filtered by form name only
                endpoint = `/api/forms?form_name=${encodeURIComponent(form_name)}`;
            }
            
            forms = await this.fetchFromBridge(endpoint);
            
            // Check if we found the form
            if (!forms || forms.length === 0) {
                if (owner_object_name) {
                    return {
                        success: false,
                        error: `Form "${form_name}" not found in owner object "${owner_object_name}"`,
                        note: 'Form name and owner object name matching is case-insensitive. Use list_pages with page_type="Form" to see available forms.',
                        validationErrors: [`Form "${form_name}" does not exist in owner object "${owner_object_name}"`]
                    };
                } else {
                    return {
                        success: false,
                        error: `Form "${form_name}" not found in any object`,
                        note: 'Form name matching is case-insensitive. Use list_pages with page_type="Form" to see available forms.',
                        validationErrors: [`Form "${form_name}" does not exist in the model`]
                    };
                }
            }
            
            // Get the first (and should be only) form from results
            const form = forms[0];
            const ownerObjectName = form._ownerObjectName;
            
            // Remove the temporary _ownerObjectName property
            delete form._ownerObjectName;

            // Calculate element counts
            const paramCount = form.objectWorkflowParam ? form.objectWorkflowParam.length : 0;
            const buttonCount = form.objectWorkflowButton ? form.objectWorkflowButton.length : 0;
            const outputVarCount = form.objectWorkflowOutputVar ? form.objectWorkflowOutputVar.length : 0;
            const totalElements = paramCount + buttonCount + outputVarCount;

            // Filter out hidden properties from the form object
            const filteredForm = this.filterHiddenFormProperties(form);

            return {
                success: true,
                form: filteredForm,
                owner_object_name: ownerObjectName,
                element_counts: {
                    paramCount: paramCount,
                    buttonCount: buttonCount,
                    outputVarCount: outputVarCount,
                    totalElements: totalElements
                },
                note: `Form "${form_name}" retrieved successfully from owner object "${ownerObjectName}". ` +
                      `Contains ${paramCount} parameter(s), ${buttonCount} button(s), and ${outputVarCount} output variable(s).`
            };

        } catch (error) {
            return {
                success: false,
                error: `Could not retrieve form: ${error instanceof Error ? error.message : 'Unknown error'}`,
                note: 'Bridge connection required to retrieve forms. Make sure the AppDNA extension is running and a model file is loaded.'
            };
        }
    }

    /**
     * Filters out hidden properties from a form object
     * These properties are hidden in the UI and should not be returned by the API
     * @param form The form object to filter
     * @returns Filtered form object without hidden properties
     */
    private filterHiddenFormProperties(form: any): any {
        const hiddenProperties = [
            'isIgnoredInDocumentation',
            'formFooterImageURL',
            'footerImageURL',
            'headerImageURL',
            'isCreditCardEntryUsed',
            'isDynaFlow',
            'isDynaFlowTask',
            'isCustomPageViewUsed',
            'isImpersonationPage',
            'isExposedInBusinessObject'
        ];

        // Create a shallow copy and remove hidden properties
        const filtered = { ...form };
        hiddenProperties.forEach(prop => {
            delete filtered[prop];
        });

        return filtered;
    }

    /**
     * Helper method to fetch data from the HTTP bridge
     * @param endpoint API endpoint to fetch from
     * @returns Parsed JSON response
     */
    private async fetchFromBridge(endpoint: string): Promise<any> {
        const http = await import('http');
        
        return new Promise((resolve, reject) => {
            const options = {
                hostname: 'localhost',
                port: 3001,
                path: endpoint,
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            };

            const req = http.request(options, (res) => {
                let data = '';

                res.on('data', (chunk) => {
                    data += chunk;
                });

                res.on('end', () => {
                    try {
                        const parsedData = JSON.parse(data);
                        resolve(parsedData);
                    } catch (error) {
                        reject(new Error(`Failed to parse response: ${error instanceof Error ? error.message : 'Unknown error'}`));
                    }
                });
            });

            req.on('error', (error) => {
                reject(new Error(`Bridge connection failed: ${error.message}`));
            });

            req.end();
        });
    }
}
