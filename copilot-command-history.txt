Command: Data object details view settings tab - make parent object name textbox read-only

2025-06-14: Fixed parent object name textbox to be truly read-only in data object details view settings tab
- Modified src/webviews/objects/components/templates/settingsTabTemplate.js
- Added explicit check: `const isParentObjectName = key === "parentObjectName"`
- Enhanced readonly attribute to ensure it's always applied: `readonly disabled`
- Fixed JavaScript in src/webviews/objects/components/scripts/saveSubmitHandlers.js that was overriding readonly
- Added condition to prevent parentObjectName field from being made editable: `if (key !== 'parentObjectName')`
- This ensures the parentObjectName textbox is always readonly regardless of property existence or checkbox state
- Implementation now prevents any modification of parent object relationships in both HTML and JavaScript

Command: Report details view - add column modal update

2025-12-20: Created add column modal similar to add data object property modal
- Created addColumnModalTemplate.js with single/bulk column addition tabs
- Integrated modal functionality directly into clientScriptTemplate.js for browser execution
- Updated add column button to use new modal instead of existing edit modal
- Added validation for Pascal case column names and uniqueness checking
- Modal focuses on essential fields: name (required) and headerText (optional, auto-generated)
- Maintains separation from existing edit column functionality
- Added createAddColumnModal function with tab switching, validation, and event handling
- Files created: addColumnModalTemplate.js, addColumnModalFunctionality.js (kept for reference)
- Files modified: detailsViewGenerator.js, mainTemplate.js, clientScriptTemplate.js
- All changes compiled successfully and passed linting

 
2025-06-14: Make the 'Parent Object Name' textbox read-only in data object details view settings tab
- Modified src/webviews/objects/components/templates/settingsTabTemplate.js
- Added logic to make parentObjectName field always readonly regardless of property existence
- Added isReadonly variable that checks (!propertyExists || key === "parentObjectName")
- Comprehensive testing confirmed all scenarios work: existing value, missing property, null value, empty string
- Other fields remain unaffected (description, name still editable when appropriate)
- Minimal change: 3 lines added, 1 line removed, net +2 lines
- Compilation and linting successful with no new issues
 
 
 
 
2025-01-14: Add property validation - add property name length limit of 100 characters
- Added length validation to validatePropertyName function in propertyModalFunctionality.js
- Validation now checks if property name exceeds 100 characters and returns appropriate error
- Works for both single property addition and bulk property addition modes
- Updated validation order: Empty → Length → Format → Uniqueness
- Created isolated test cases to verify the 100 character limit enforcement
- Updated ai-agent-architecture-notes.md to document the validation enhancement
- Minimal changes: 3 lines added, 0 lines deleted
   

2025-06-14: Add object selection in tree view after creating data objects via wizard
- Added selectDataObject method to JsonTreeDataProvider to select objects by name
- Registered appdna.selectDataObject command in registerCommands.ts
- Modified addObjectWizardView.js to call tree selection after object creation  
- Tree selection expands DATA OBJECTS section and selects the newly created object
- Added 300ms delay to allow tree refresh before selection
- Verified compilation and basic functionality with mock tests
- Minimal changes: ~50 lines added across 3 files, 0 lines deleted
 
2025-06-14: Fix button name validation to disallow numbers in report details view
- Updated validation regex from /^[a-zA-Z][a-zA-Z0-9]*$/ to /^[a-zA-Z]+$/ (alpha only)
- Changed error message to "Button name must contain only letters (no numbers or spaces)"
- Modal note already correctly stated "Alpha characters only" requirement
- Verified validation with comprehensive test cases (valid/invalid names)
- Built and tested successfully - no compilation errors
- Minimal change: 2 lines modified in clientScriptTemplate.js
 
2025-01-XX: Add maximum length validation (100 characters) to data object wizard name
- Added max length validation to validateName case in addObjectWizardView.js
- Validation triggers before other format checks (after empty check)
- Updated UI input note to inform users about 100 character limit
- Tested validation logic with standalone test covering edge cases
- Verified compilation, linting, and no existing functionality broken
- Minimal changes: 11 lines added, 1 line modified in single file
 
- Files modified: jsonTreeDataProvider.ts, registerCommands.ts, addObjectWizardView.js

2025-12-24: Add Help view with GitHub links and issue reporting information
- Created src/webviews/helpView.js with help content and GitHub repository links
- Added showHelpView command registration in registerCommands.ts
- Added help command definition in package.json with question mark icon
- Added help button to tree view positioned to the left of welcome button (navigation@-1)
- Help view includes:
  - Link to GitHub repository for learning more
  - Information about logging issues on GitHub with direct link
  - Quick tips for using the extension
- Minimal changes: 1 new file created, small additions to existing files
- Files modified: src/webviews/helpView.js (new), src/commands/registerCommands.ts, package.json


2025-06-08: Add public repository links to Welcome and Login views
- Added footer section with GitHub repository link to welcomeView.js  
- Added footer section with GitHub repository link to loginView.ts
- Added consistent CSS styling for footer using VS Code theme variables
- Repository link (https://github.com/derivative-programming/vscode-extension) opens in new tab
- Verified changes compile successfully and pass linting
- Created custom test to validate footer links are properly included
- Minimal changes: 20 lines added to each file, 0 lines deleted
- Files modified: welcomeView.js, loginView.ts

2025-01-20: Add refresh button to Object Hierarchy Diagram view
- Added refresh button to the toolbar with codicon refresh icon in hierarchyView.js
- Added event listener for refresh button click
- Added refreshDiagram function that sends 'refreshDiagram' message to extension
- Added message handler case in extension to reload fresh data and update webview
- Follows existing pattern used by other views for refresh functionality
- Verified build compiles successfully
- Minimal changes: 17 lines added to hierarchyView.js, 0 lines deleted
- Files modified: hierarchyView.js
 
2024-12-20: Fixed move button states not updating after move operations in report details view
- Issue: Move up/down buttons' enabled/disabled states were not being updated after move operations
- Root cause: updateMoveButtonStates() function was not called after moveListItem() and reverseList() operations
- Solution: Added calls to updateMoveButtonStates() after selection changes in both functions
- Files modified: src/webviews/reports/components/templates/clientScriptTemplate.js (6 lines added)
- Result: Move buttons now correctly enable/disable based on the new position after moves
- Verified: Build successful, lint clean, minimal surgical change
 

2025-06-08: Implemented Move Up and Move Down buttons for report details view
- Added Move Up/Down buttons to columns, buttons, and parameters tabs list views
- Implemented client-side moveListItem() function to handle UI updates and messaging
- Added message handlers (moveColumn, moveButton, moveParam) in reportDetailsView.js
- Added array manipulation functions to reorder items in model arrays
- Added CSS styles for button layout and disabled states
- Added button state management to disable buttons when not applicable
- Created comprehensive tests to validate all functionality
- Files modified: mainTemplate.js, clientScriptTemplate.js, reportDetailsView.js, detailsViewStyles.js 

2025-12-20: Updated property modal to use Pascal case instructions instead of placeholder text
- Removed placeholder text from property name input field and bulk add textarea
- Added field-note divs with Pascal case instructions and example (ToDoItem)
- Added CSS styling for field-note class with appropriate VS Code theming
- Instructions specify no spaces allowed and alpha characters only
- Files modified: propertyModalTemplate.js, detailsViewStyles.js

Command: Fix unsaved changes flag when adding properties to data objects
- Added propertyAdded event dispatch in addNewProperty function to trigger model update
- Leverages existing event handler that calls updateModel command which marks unsaved changes
- Minimal change: one line added to dispatch CustomEvent('propertyAdded')
- Files modified: propertyManagement.js
 

2025-12-19: Updated data object wizard per issue requirements
- Removed "PascalCase name" placeholder from step 3 object name input field
- Added guidance note below input: "Use PascalCase naming (example: ToDoItem). No spaces allowed. Alpha characters only."
- Added CSS styling for input note with VS Code theming (.input-note class)
- Imported showObjectDetails function from objectDetailsView 
- Modified object creation success handler to open Data Object Details view for newly created object
- File modified: src/webviews/addObjectWizardView.js
Command: add data object wizard update


Command: Expand all top level tree items in the AppDNA tree view

2025-01-17: Added step 8 to welcome view workflow
- Added new workflow step 8: "Manual Model Editing"
- Step description: "Manually make any changes you like to the model, then go back to step 4."
- Added workflow note explaining how to use AppDNA tree view or directly edit JSON file
- Creates iterative workflow where users can manually edit model and re-run AI processing
- Files modified: welcomeView.js

2025-01-06: Implemented Reverse buttons for report details view
- Added Reverse buttons to columns, buttons, and parameters tabs list views
- Implemented client-side reverseList() function to handle UI updates and messaging
- Added message handlers (reverseColumn, reverseButton, reverseParam) in reportDetailsView.js
- Added array reverse functions (reverseColumnArray, reverseButtonArray, reverseParamArray) to reverse model arrays
- Follows existing patterns for minimal changes without modifying working functionality
- Files modified: mainTemplate.js, clientScriptTemplate.js, reportDetailsView.js
Command: Expand all top level tree items in the AppDNA tree view
Command: Expand all top level tree items in the AppDNA tree view
Command: Expand all top level tree items in the AppDNA tree view
Command: Expand all top level tree items in the AppDNA tree view

Command: In the report details view report button tab on add button modal do not allow numbers in a button name

June 14, 2025: Update button name validation in report details view to prevent numbers in button names
- Modified validateButtonName function in src/webviews/reports/components/templates/clientScriptTemplate.js
- Changed regex from /^[a-zA-Z][a-zA-Z0-9]*$/ to /^[a-zA-Z][a-zA-Z]*$/ to only allow letters
- Updated validation error message to reflect the new requirement

2025-06-14: Fixed display issues with 'add column' modal on report details page column tab
- Fixed close button class from 'close-button' to 'close' to match existing CSS
- Added grid-container and action-buttons divs for proper modal layout structure
- Enhanced modal CSS with flexbox centering, max-width/height, and scroll support
- Updated clientScriptTemplate.js and addColumnModalFunctionality.js for correct close button selector
- Added missing grid-container styles and improved textarea styling in detailsViewStyles.js
- Modal now displays properly with consistent VS Code theme styling and responsive behavior
- All changes compiled successfully without errors

2025-06-14: Updated the report details view 'add column' modal to match the object details view 'add property' modal design and functionality
- Modified src/webviews/reports/components/templates/addColumnModalTemplate.js:
  * Changed close button class from "close" to "close-button" to match object modal
  * Removed "modal-title" class and action-buttons wrapper for cleaner structure
  * Simplified form structure to match object modal layout
  * Added character limit information to field notes (maximum 100 characters)
- Modified src/webviews/reports/components/templates/clientScriptTemplate.js:
  * Updated close button selector from ".close" to ".close-button"
  * Updated modal HTML template to match new structure
  * Added character limit validation (100 characters max) to validateColumnName function
  * Updated field notes to include character limit information
- Modified src/webviews/reports/components/templates/addColumnModalFunctionality.js:
  * Added character limit validation for consistency (even though not currently used)
- Modified src/webviews/reports/styles/detailsViewStyles.js:
  * Added .close-button and .close-button:hover styles to match .close styles
  * Ensures both close button class names work with the same styling
- The modal now has consistent styling, validation, and functionality with the object property modal
- Both modals support single and bulk add operations with proper validation and user feedback

Command: 'Header Text:' property shouldnt be in the 'add column' modal

2025-06-14: Removed the 'Header Text:' property from the 'add column' modal to simplify it and match the object 'add property' modal design
- Modified src/webviews/reports/components/templates/addColumnModalTemplate.js:
  * Removed the Header Text input field and its associated form-row
  * Removed the field note explaining header text usage
  * Simplified the modal to only have Column Name input like the object property modal
- Modified src/webviews/reports/components/templates/clientScriptTemplate.js:
  * Removed Header Text field from the inline HTML template
  * Updated addSingleColumn event handler to not try to get headerText input value
  * Changed logic to always auto-generate header text from column name using generateHeaderText()
- Modified src/webviews/reports/components/templates/addColumnModalFunctionality.js:
  * Updated for consistency (even though not currently used)
  * Removed header text input handling and made it auto-generate only

Command: the label, textbox, and note text are on the same line on both the single column tab and bulk add columns tab. They should be vertical, one over the other

2025-06-14: Fixed the layout of the add column modal so label, textbox, and note text are stacked vertically instead of appearing on the same line
- Modified src/webviews/reports/components/templates/addColumnModalTemplate.js:
  * Restructured the form-row divs to have proper vertical layout
  * Ensured labels, inputs, and field notes are properly stacked
- Added proper CSS styling through existing form layout classes
- Both single column and bulk add tabs now display elements vertically in the correct order:
  1. Label at top
  2. Input field in middle  
  3. Field note at bottom

Command: The 'add filter' modal should work similar to the 'add column' modal

2025-06-14: Making the 'add filter' modal work similar to the 'add column' modal with consistent design and functionality
  * Created template file for add filter modal, similar to add column modal
  * Both modals now use consistent styling and tab structure
  * Single vs bulk add functionality matches between modals
  * Validation logic is consistent between column and filter modals
  * Field notes and error handling work the same way
- Modified src/webviews/reports/components/templates/addParamModalTemplate.js:
  * Updated to match add column modal structure with tabs
  * Changed from "Add Parameter" to "Add Filter" to match UI terminology
  * Made single vs bulk add functionality consistent
  * Added proper validation error containers
- Modified related functionality files to support the new modal structure
- Add filter modal now has consistent design and functionality with add column modal

June 14, 2025 - User asked: "when a user adds a column by using the 'add column' modal, what happens?"

June 14, 2025 - User observed: "seems like it should be adding the new column to the model in memory first and then reload the view"

Analysis revealed current flow issue:
- Current: Frontend updates UI → Backend updates model → Only tree view refreshes
- Problem: Webview doesn't reload, so new column not visible in table until manual refresh
- Recommended: User submits → Backend updates model → Backend reloads entire webview with updated data
- This ensures model is single source of truth and UI stays synchronized

June 14, 2025 - User said: "implement this" (referring to proper add column flow)

2025-06-14: ✅ IMPLEMENTED proper add column flow where model is updated first and view reloads
- Modified src/webviews/reports/reportDetailsView.js:
  * Updated updateModelDirectly() function to accept panel parameter and reload webview
  * Added schema loading and view regeneration after model update
  * Modified updateModel message handler to pass panel reference
  * Now backend updates model THEN regenerates entire webview HTML
- Modified src/webviews/reports/components/templates/clientScriptTemplate.js:
  * Updated addNewColumn() function to not modify frontend state
  * Changed to send updateModel command and let backend handle UI updates
  * Updated inline modal handlers for both single and bulk column operations
  * Removed immediate UI updates (dropdown, currentColumns array modifications)
- Modified src/webviews/reports/components/templates/addColumnModalFunctionality.js:
  * Updated single column handler to rely on backend for UI updates
  * Fixed bulk column handler to send all columns in one operation
  * Removed frontend UI manipulation, let backend reload view instead

**New Flow Implemented**:
1. User submits column via modal (frontend)
2. Frontend sends updateModel command to backend (no local UI changes)
3. Backend updates model in memory first (single source of truth)
4. Backend regenerates and reloads entire webview with updated model data
5. User immediately sees new column in all views (dropdown, table, etc.)

June 14, 2025 - User reported: "the button on the modal to 'add column' does nothing"

Investigating modal button functionality issue...

2025-06-14: 🐛 FIXED - Add column modal button not working
- **Root Cause**: Event listeners were being attached before modal DOM was ready, and using global selectors instead of modal-scoped selectors
- **Issues Found**:
  1. Event listeners attached immediately after creating modal, but before DOM was fully ready
  2. Using `document.getElementById()` instead of `modal.querySelector()` - elements not found in global scope
  3. Functions defined inside event listener scope but needed in modal scope
- **Fix Applied**:
  * Modified createAddColumnModal() in clientScriptTemplate.js to use proper timing
  * Created separate attachModalEventListeners() function called after modal is shown
  * Changed all `document.getElementById()` to `modal.querySelector()` for proper scoping
  * Moved validation and helper functions inside attachModalEventListeners for proper scope
  * Event listeners now properly find modal elements and execute correctly
- **Result**: Add Column button now works properly, can add single and bulk columns with immediate view refresh

June 14, 2025 - User reported: "it looks like the tab is changed to 'settings' Can it stay on the columns tab if im adding a column?"

Issue: After adding column, view reloads but switches to default 'Settings' tab instead of staying on 'Columns' tab.
Need to preserve active tab state during view reload.

2025-06-14: ✅ FIXED - Tab preservation when adding columns
- **Issue**: After adding column, view reloaded but switched to default 'Settings' tab instead of staying on 'Columns' tab
- **Root Cause**: View regeneration always defaults to first tab (Settings) without preserving user's current tab state
- **Solution Implemented**:
  1. **Frontend Changes**: Modified addNewColumn() function to detect current active tab and send preserveTab parameter
  2. **Backend Changes**: Updated updateModelDirectly() to handle preserveTab parameter and send restoreTab message after view reload
  3. **Tab Restoration**: Added message listener and restoreActiveTab() function to client script for tab restoration
- **Technical Details**:
  * Frontend detects active tab using `document.querySelector('.tab.active').getAttribute('data-tab')`
  * Backend sends restoreTab message with 100ms delay after HTML regeneration
  * Client script listens for restoreTab message and restores correct tab state
  * Works for both single column and bulk column additions
- **Files Modified**:
  * clientScriptTemplate.js: Added tab detection, message listener, and restoration function
  * reportDetailsView.js: Added preserveTab handling and restoreTab message sending
- **Result**: Users stay on Columns tab when adding columns, maintaining better UX flow

June 15, 2025 - User asked: "why the delay on preserving the tab?"

**Answer about the delay**:
The 100ms delay was needed because:
1. `panel.webview.html = ...` triggers async DOM update in VS Code
2. If restoreTab message sent immediately, DOM elements might not exist yet
3. `document.querySelector()` would fail to find tab elements

**Improved Implementation**:
- Removed backend setTimeout delay
- Added client-side retry logic in restoreActiveTab()
- Tries immediately first, then retries after 50ms if elements not found
- More robust and responsive than fixed 100ms delay
- Handles timing issues at the client side where DOM state can be checked

June 15, 2025 - User requested: "The 'add filter' modal should work similar to this 'add column' modal"

Implementing add filter modal with same functionality as add column modal:
- Proper model updating (backend first, then view reload)
- Tab preservation (stay on Filters tab after adding)
- Same validation and user experience patterns

2025-06-15: ✅ IMPLEMENTED - Add filter modal improvements to match add column modal
- **Updated addNewParam() function**:
  * Changed from updating frontend state to sending backend updates first
  * Added tab preservation (preserveTab parameter) to stay on Filters tab
  * Removed frontend UI manipulation (dropdown updates, currentParams array mods)
  * Now follows same pattern as improved addNewColumn()
- **Updated createAddParamModal() function**:
  * Restructured to use proper timing with attachParamModalEventListeners()
  * Changed from document.getElementById() to modal.querySelector() for scoped element selection
  * Fixed event listener attachment timing issues
  * Added proper bulk parameter handling with single backend update
- **Improvements Applied**:
  * Model-first approach: backend updates model, then reloads view
  * Tab preservation: users stay on Filters tab when adding filters
  * Proper validation and error handling
  * Single vs bulk add functionality works correctly
  * Immediate visual feedback through view reload
- **Result**: Add filter modal now works identically to add column modal with same UX patterns and reliability

Command: Refactor add button modal to match improved add column/filter pattern

June 15, 2025 - User requested: "now refactor the add button modal to follow the same backend-first pattern as the column and filter modals, but without bulk add functionality"

Implementing add button modal improvements to match add column and add filter modals:
- Update to backend-first approach (model updates first, then view reload)
- Add tab preservation (stay on Buttons tab after adding)
- Remove frontend state manipulation (no currentButtons array updates)
- Remove bulk add functionality (single add only)
- Follow same UX patterns as improved column/filter modals

Current Issues with Add Button Modal:
1. Updates frontend state directly (currentButtons.push)
2. Manually updates UI elements (buttonsList dropdown)
3. Doesn't preserve active tab after model update
4. Uses older event pattern (custom events) instead of newer modal pattern

Target Implementation:
- addNewButton() function should only send updateModel command to backend
- Include preserveTab parameter to stay on Buttons tab
- Remove direct UI manipulation - let backend reload view
- Use same modal creation pattern as addColumnModal and addParamModal
- Single button add only (no bulk functionality needed)

2025-06-15: ✅ IMPLEMENTED - Add button modal refactored to match improved column and filter patterns

**Changes Applied**:
- **Updated addNewButton() function**:
  * Changed from updating frontend state to sending backend updates first  
  * Added tab preservation (preserveTab parameter) to stay on Buttons tab
  * Removed frontend UI manipulation (buttonsList dropdown updates, currentButtons array mods)
  * Now follows same backend-first pattern as improved addNewColumn() and addNewParam()
- **Created new Add Button modal system**:
  * Added getAddButtonModalHtml() function with simple single-button-add UI (no bulk functionality)
  * Created createAddButtonModal() function following same pattern as column/param modals
  * Added attachButtonModalEventListeners() with proper scoped event handling
  * Includes validation for Pascal case, alpha-only, uniqueness, and 100-char limit
- **Removed legacy modal handling**:
  * Removed old validateButtonName() function (duplicate)
  * Removed addButtonRequested custom event listener pattern
  * Replaced add button click handler to use new createAddButtonModal()
- **Result**: Add button modal now works identically to add column and add filter modals:
  * Model-first approach: backend updates model, then reloads view
  * Tab preservation: users stay on Buttons tab when adding buttons  
  * Proper validation and error handling
  * Single button add functionality (no bulk needed as requested)
  * Immediate visual feedback through view reload
  * No frontend state divergence issues

**Technical Implementation Details**:
- Button modal template embedded in clientScriptTemplate.js like column/param templates
- Uses same modal creation pattern with setTimeout for DOM readiness
- Event listeners scoped to modal instance using modal.querySelector() 
- Validation function local to modal scope to access currentButtons data
- Follows exact same UX flow: user submits → backend updates model → view reloads → tab restored

**Files Modified**:
- clientScriptTemplate.js: Added getAddButtonModalHtml(), createAddButtonModal(), attachButtonModalEventListeners()
- clientScriptTemplate.js: Updated addNewButton() to backend-first pattern
- clientScriptTemplate.js: Removed legacy event handling code
- Created addButtonModalTemplate.js: Standalone template file (for reference, embedded version used)

**Compilation**: TypeScript compilation successful with no errors

All three modals (add column, add filter, add button) now follow the same robust, backend-first pattern with tab preservation and consistent UX.
