2025-08-02: Fix issue where typing in property setting value causes list selection to be lost - in data object details view on properties tab list view

2025-01-27: Fixed parameter list not refreshing after adding input controls via modal
- Added webview refresh message (refreshParamsList) to addParamToFormWithName and addParamToForm functions
- Updated function signatures to accept panel parameter for webview communication
- Updated function calls to pass panel parameter from message handlers
- Added newSelection parameter to automatically select newly added parameters in the list
- Parameter list now immediately updates to show new items when added via modal or regular add button
- Matches the refresh pattern used by other successful operations like move and reverse functions
2025-01-27: Fixed "saveModel is not a function" error in form details view add functionality
- Replaced incorrect modelService.saveModel() calls with markUnsavedChanges() pattern used throughout codebase
- Added proper UI refresh using vscode.commands.executeCommand("appdna.refresh") after model changes
- Fixed addParamToForm, addParamToFormWithName, copy parameter, copy button, add button, and update parameter functions
- Now matches the pattern used in reports view and other form functions for proper model state management
- Add Input Control modal functionality now works correctly without backend errors
2025-01-27: Fixed modal styling issues in Add Input Control modal for form details view (updated)
- Fixed modal CSS to support flexbox centering (added align-items: center and justify-content: center)
- Changed modal width to fixed 400px with max-width 90vw for better responsiveness
- Removed margin: auto approach in favor of flexbox centering for proper positioning
- Increased input padding from 8px to 10px and set explicit font-size to 14px
- Increased textarea min-height from 80px to 100px for better usability
- Added modal-specific form-row styling for vertical layout instead of horizontal
- Modal now properly centers and has appropriately sized inputs and textareas
2025-01-27: Implemented "Add Input Control" modal functionality for form details view
- Created addInputControlModalTemplate.js with modal HTML template
- Created addInputControlModalFunctionality.js with modal JavaScript functionality  
- Fixed JS syntax error in clientScriptTemplate.js - corrected malformed function declarations in getPropertyModalHtml, getObjectSearchModalHtml, and getLookupItemModalHtml functions. The toString().replace() method was creating invalid JavaScript syntax. Changed to directly call the template functions and properly escape template literals.
- Updated domInitialization.js to use modal instead of direct command
- Added addParamWithName command handler to formDetailsView.js
- Added addParamToFormWithName function to handle parameter creation with custom names
- Modal follows same pattern as "Add Column" modal in reports view with single/bulk tabs
- Includes validation, Enter key handling, focus management, and error display
- Supports both single input control addition and bulk addition (one name per line)
2025-01-20: Fixed broken image URLs in README.md by replacing GitHub blob URLs with raw GitHub URLs. Changed all image URLs from 'github.com/blob/main/' to 'raw.githubusercontent.com/main/' format which is required for proper image display on VS Code Marketplace. Updated MARKETPLACE-PUBLISHING-GUIDE.md to document the correct URL format and explain why blob URLs cause broken images.
2025-07-27: Fixed form details view selection preservation during move operations to match report behavior. When moving items in form details view, selection was staying at old index instead of following moved item to new position. Updated moveParamInArray, moveButtonInArray, and moveOutputVarInArray functions to include newSelection: toIndex in postMessage. Modified refreshParamsList, refreshButtonsList, and refreshOutputVarsList functions to accept newSelection parameter and use it to set selection to moved item's new position. Updated message handlers to pass newSelection from server to refresh functions. Now selection follows moved item like in report details view.
2025-07-27: Added missing move button event handlers for Input Controls tab. Parameter management was missing event handlers for moveUpParamsButton and moveDownParamsButton, causing clicks to do nothing. Added event handlers that send moveParam commands with nested data structure {fromIndex, toIndex} to match server expectations. Parameters now properly move up/down when buttons are clicked.
2025-07-27: Fixed form details view move button states by implementing report-style button management. Updated client script template to include updateMoveButtonStates function, added selection preservation in refresh functions, and set up event listeners for list selection changes. Move buttons now properly disable when no item selected or when item can't move in that direction, matching report details view behavior.
2025-07-27: Fixed message data structure mismatch in form details view move functionality. Client-side code sends fromIndex/toIndex directly on message object for moveButton/moveOutputVar commands, but nested in data property for reorderForm* commands. Added proper data extraction for both patterns and added missing message handlers for reorderFormParam, reorderFormButton, and reorderFormOutputVar commands that parameter management functions actually send.
2025-07-27: Fixed form details view move up/down functionality to match report details view implementation. Updated moveParamInArray, moveButtonInArray, and moveOutputVarInArray functions to use fromIndex/toIndex pattern instead of direction-based moves, added panel parameter for webview refresh, replaced saveModel() with markUnsavedChanges(), added postMessage to refresh lists in webview, and improved error handling and validation. All move functions now consistently use the same robust pattern as report details view.
2025-07-26: Added hover effect to view preview button with !important declarations to match icon buttons on preview view
2025-07-26: Added eye icon button to report details view - includes header container layout, view preview button styling with hover effects, openPagePreview function in client script, context parameter support, codicons URI handling, and openPagePreview message handler for cross-view navigation to page preview
2025-07-26: Fixed extension context not available error for report details view by adding showReportDetailsCommand wrapper function that ensures context is properly passed from command registration scope
2025-07-26: Fixed extension context issue in page preview view - updated showReportDetailsForPreview to pass currentContext parameter when calling showReportDetails, matching the pattern already used for forms
2025-07-27: Analyzed form details view modals - documented 6 different modals available: param-modal (edit parameters), button-modal (edit buttons), output-var-modal (edit output variables), add-param-modal (add new parameters), add-button-modal (add new buttons), and add-output-var-modal (add new output variables). All modals follow consistent pattern with form fields generated from schema, property toggle checkboxes, save/cancel actions, and tooltip support for schema descriptions.
2025-07-27: Reviewed form details view list buttons - each tab (Input Controls, Buttons, Output Variables) has consistent set of 5 buttons: Add (specific to tab), Copy, Move Up, Move Down, and Reverse. All tabs use same pattern with select list + button group layout for managing array items.
2025-07-26: Fixed incorrect import paths for reportDetailsView module - corrected paths from '../webviews/reportDetailsView' to '../webviews/reports/reportDetailsView' in commands and updated wrapper function to pass context parameter through
2025-01-20: Fixed VS Code Marketplace screenshot display issue. Removed invalid 'screenshots' array from package.json (not supported by VS Code extensions) and properly added all 5 screenshots to README.md using markdown image syntax with GitHub URLs. Updated MARKETPLACE-PUBLISHING-GUIDE.md to correct the misinformation and add troubleshooting section explaining that VS Code Marketplace displays images from README.md, not package.json configuration.
2024-12-29: Fixed copy buttons across all views to copy list contents to clipboard. Converted report view copy buttons (columns, buttons, params) from object duplication to clipboard copy using navigator.clipboard API with fallback. Fixed all three form view copy buttons (buttons, output variables, parameters) to copy item names to clipboard instead of duplicating objects. This ensures consistent clipboard copy behavior across data object view, report view, and form view.

July 26, 2025: Review page preview view and change lower title format from 'Page Preview' to '[page name] Preview'

2025-07-26: Review page preview view display of a form. If a button has the property conditionalVisiblePropertyName set then show a {?} with the button and hover text describing when it is shown.

July 26, 2025: Fix page preview title to use page name instead of page title text

July 26, 2025: Implement alphabetical sorting for page dropdown items

July 26, 2025: Add refresh icon button to 'select page' section to repopulate dropdown from model in memory

July 26, 2025: Remove blue background color from refresh button

July 26, 2025: Review and fix refresh icon button display by comparing with model feature catalog view

July 26, 2025: Debug and fix refresh button not reloading dropdown issue - fix undefined allPages error

July 26, 2025: Add filter icon button next to refresh button with modal for filtering dropdown items and cancel filter button

July 26, 2025: Add page count display showing total and filtered counts in select page section

July 26, 2025: Add edit icon button to page preview title and remove 'view full page details' button

July 26, 2025: Add refresh icon button next to edit button in page preview section to rebuild from model in memory

July 26, 2025: Add 'view preview' icon button to form details view title to open page preview with current form selected

July 26, 2025: Update view preview button to use eye icon only, move next to title, and ensure page preview opens if not already open

July 26, 2025: Fix icon display issue in form details view by reviewing page preview icon button implementation and fix page selection not working - Fixed codicon CSS path to use context.extensionPath instead of relative path, increased page selection timeout to 1000ms, and added debug logging to identify page matching issues

Fix 'context is not defined' error in form details view - Added context parameter to showFormDetails function chain, updated function signatures in formDetailsView.js, formCommands.ts, registerCommands.ts, pagePreviewView.js, and pageFlowDiagramView.js to properly pass extension context for codicon CSS loading

Fix page selection error and improve icon visibility - Fixed getPagePreviewPanel access pattern (panel.webview instead of result.webview), added enhanced debug logging for page preview communication, and added visible fallback icon and debugging CSS for view preview button visibility

Command: Expand all top level tree items in the AppDNA tree view
Command: Expand all top level tree items in the AppDNA tree view

2025-07-26: Implemented formFooterText display in page preview view for forms
2025-07-26: Removed placeholder content from form preview when no controls are defined

2025-07-27: Review the 'reverse' button on the three tabs in report details view

2025-07-27: Fixed reverse buttons in report details view not updating display - replaced excessive refreshAll() calls with lightweight targeted list updates. Now when reverse buttons are clicked, backend sends specific refresh messages (refreshColumnsList, refreshButtonsList, refreshParamsList) to webview which updates only the affected select list without regenerating entire view. More efficient approach that only updates what changed.

2025-07-27: Fixed reverse buttons in form details view not updating display - applied same lightweight approach as reports. Added panel parameter to reverse functions, fixed command name inconsistencies (added support for both reverseButton/reverseButtons), removed duplicate reverseParams handler, and added client-side refresh handlers (refreshParamsList, refreshButtonsList, refreshOutputVarsList). Now form reverse buttons update display immediately without heavy webview regeneration.

2025-07-27: Fixed Input Controls tab reverse button not working and Buttons tab showing wrong text - corrected parameterManagementFunctions.js to send 'reverseParam' instead of 'reverseFormParams', fixed button ID from 'reverse-params-btn' to 'reverseParamsButton', and updated refreshButtonsList to use 'buttonText || buttonName' property for proper display text matching the main template pattern.
2025-01-27: change all the buttons with text 'Copy' to 'Copy List'
2025-07-26: Added auto-submit notification display in form preview when isAutoSubmit=true
2025-07-26: Right-justified 'other' and 'add' type buttons in report grid view action buttons

2025-07-27: Reviewed report details view buttons under lists - Found inconsistency with form details view pattern. Report details view has 4 buttons (Copy, Move Up, Move Down, Reverse) in each tab (columns, buttons, filters) as shown in mainTemplate.js lines 107-111, 128-132, and 149-153. However, Copy functionality is missing from reportDetailsView.js - no copyColumn, copyButton, or copyParam message handlers or functions exist. Form details view documented to have consistent 5-button pattern (Add, Copy, Move Up, Move Down, Reverse) with all functionality implemented. Report details view needs Copy button implementation added to match the expected pattern.

2025-07-27: Fixed copy buttons in report details view - Added missing copy functionality to match form details view pattern. Implemented copyColumn, copyButton, and copyParam message handlers in reportDetailsView.js with functions that create deep copies, append " - Copy" to names for uniqueness, insert copies after originals, and save model. Added complete client-side event handlers in domInitialization.js setupListButtonHandlers function for all 12 list buttons (Copy, Move Up, Move Down, Reverse for columns, buttons, and params tabs). Copy buttons now functional and consistent with established form details view pattern.

2025-07-27: Fixed copy buttons to copy names to clipboard instead of duplicating objects - Corrected misunderstanding of copy functionality. Report details view should copy list item names to clipboard (as shown in backup), not duplicate objects. Replaced object duplication handlers with clipboard copy handlers in domInitialization.js using navigator.clipboard API with fallback. Removed duplicate copy message handlers and functions from reportDetailsView.js. Added missing copyParamsButton handler to form details view parameterManagementFunctions.js. Copy buttons now properly copy item names to clipboard with visual feedback.

2025-07-27: Reviewed move up and move down buttons on report details view tabs - Found missing move button state management functionality. Unlike Form Details view which has proper button enabling/disabling based on selection position, Report Details view lacks list selection change handlers that update move button states. Move buttons should be disabled when no item selected, Move Up disabled when first item selected, Move Down disabled when last item selected. Currently buttons remain enabled in all states, allowing invalid operations. Need to add updateMoveButtonStates function and list selection change handlers for all three tabs (columns, buttons, params).

2025-07-27: Fixed move button state management in report details view - Added comprehensive move button state management with proper disabled/enabled states based on list selection. Implemented updateMoveButtonStates function in clientScriptTemplate.js, added list selection change handlers in domInitialization.js that initialize and update button states on selection changes. Enhanced refresh functions to preserve selection and update button states after list updates. Updated move operation handlers to refresh list displays and maintain proper selection. Fixed backend move functions to pass panel parameter and send targeted refresh messages (refreshColumnsList, refreshButtonsList, refreshParamsList) to avoid full page reloads. Move buttons now properly disabled when no selection, Move Up disabled for first item, Move Down disabled for last item, with immediate UI updates after operations.
2025-07-27: Fixed missing "Add Button" modal in report details view - The add-button-btn was defined in mainTemplate.js but missing its click event handler in domInitialization.js. The createAddButtonModal function existed in modalFunctionality.js but was never called. Added missing event listeners for add-column-btn, add-button-btn, and add-param-btn buttons in setupListButtonHandlers function to call their respective createAdd*Modal functions. Also added missing createAddColumnModal and createAddParamModal functions with their corresponding attachColumnModalEventListeners and attachParamModalEventListeners functions to modalFunctionality.js. Added missing addNewButton function to buttonManagementFunctions.js. Fixed generateButtonText function scope error by moving it to global scope in modalFunctionality.js so it can be accessed by addNewButton function. All Add modals now show properly when their buttons are clicked.
Command: Expand all top level tree items in the AppDNA tree view
Command: Expand all top level tree items in the AppDNA tree view
Command: Expand all top level tree items in the AppDNA tree view
Command: Expand all top level tree items in the AppDNA tree view
Command: Expand all top level tree items in the AppDNA tree view
Command: startMCPServerCommand
Command: stopMCPServerCommand
2025-08-02: Fixed JS syntax error in clientScriptTemplate.js - corrected malformed function declarations in getPropertyModalHtml, getObjectSearchModalHtml, and getLookupItemModalHtml functions. The toString().replace() method was creating invalid JavaScript syntax. Changed to directly call the template functions and properly escape template literals.
